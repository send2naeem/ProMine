package forms;

import forms.Form_stage_one;
import java.awt.List;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoundedRangeModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import pro.miner.classess.AgrovocSearcher;
import pro.miner.classess.Corpus;
import pro.miner.classess.Global;
import pro.miner.classess.StartStemmer;
import static pro.miner.classess.StartStemmer.freqmodel;
import static pro.miner.classess.StartStemmer.wordsmodel;
import pro.miner.classess.TextMining;
import pro.miner.classess.TreeSelection;
import pro.miner.classess.WiktionarySearcher;
import pro.miner.classess.WordNetSearcher;
import pro.miner.classess.listWordSelection;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Devil Knight
 */
public class Form_text_mining extends javax.swing.JFrame {

    public static Boolean includeAgrovocDictionary = false;
    public static Set words = new HashSet<String>();

    /**
     * Creates new form TextMiningForm
     */
    public Form_text_mining() {
        initComponents();

        setVisible(true);
        jMenuItem1.setVisible(false);
        BoundedRangeModel model = jScrollPane3.getVerticalScrollBar().getModel();
        jScrollPane6.getVerticalScrollBar().setModel(model);
        //meaningPanel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        contextstree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        departmentField = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        folderPath = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        searchWord = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        addSource = new javax.swing.JButton();
        domain = new javax.swing.JButton();
        tastStatus = new javax.swing.JLabel();
        departmentName = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        checkfile = new javax.swing.JCheckBox();
        checktok = new javax.swing.JCheckBox();
        checkstop = new javax.swing.JCheckBox();
        checkFreqCount = new javax.swing.JCheckBox();
        checktransform = new javax.swing.JCheckBox();
        checkStem = new javax.swing.JCheckBox();
        checkwordselect = new javax.swing.JCheckBox();
        selectedGlossaryFilePath = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listofwords = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        freqlist = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();
        select = new javax.swing.JButton();
        progressBarTextMining = new javax.swing.JProgressBar();
        jTextFieldGlossaryFile = new javax.swing.JTextField();
        select1 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        thirdPartySearchPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        checkBoxIncludeAgrovocdDictionary = new javax.swing.JCheckBox();
        jScrollPane11 = new javax.swing.JScrollPane();
        agrovocWords = new javax.swing.JList();
        jScrollPane10 = new javax.swing.JScrollPane();
        relatedWordsListWiktionary = new javax.swing.JList();
        jScrollPane8 = new javax.swing.JScrollPane();
        relatedWordsListWordNet = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        meaningArea = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        derivedWordsListWiktionary = new javax.swing.JList();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        loadPreProcessedFile = new javax.swing.JCheckBox();
        saveCorpusFile = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane4.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pro Miner - Text Mining");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(154, 180, 209));

        jLabel1.setFont(new java.awt.Font("Cambria", 1, 32)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 116, 193));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Text Mining");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Select a Directory");
        contextstree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        contextstree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                contextstreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(contextstree);

        departmentField.setEditable(false);
        departmentField.setColumns(20);
        departmentField.setRows(5);
        jScrollPane2.setViewportView(departmentField);

        jLabel2.setText("File/Folder Path");

        folderPath.setEditable(false);
        folderPath.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        folderPath.setPreferredSize(new java.awt.Dimension(6, 25));
        folderPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                folderPathActionPerformed(evt);
            }
        });

        jLabel3.setText("Words");

        jLabel4.setText("Frequency");

        searchWord.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        searchWord.setText("Search");
        searchWord.setEnabled(false);
        searchWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchWordActionPerformed(evt);
            }
        });

        reset.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        reset.setText("Reset");
        reset.setEnabled(false);
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        addSource.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        addSource.setText("Add Source Files");
        addSource.setEnabled(false);
        addSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSourceActionPerformed(evt);
            }
        });

        domain.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        domain.setText("Domain Expert");
        domain.setEnabled(false);
        domain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                domainActionPerformed(evt);
            }
        });

        tastStatus.setText("Task Status");

        departmentName.setText("Department Name");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        checkfile.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        checkfile.setText("Input File Read");
        checkfile.setEnabled(false);

        checktok.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        checktok.setText("Tokenization");
        checktok.setEnabled(false);

        checkstop.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        checkstop.setText("Stop Word Filteration");
        checkstop.setEnabled(false);

        checkFreqCount.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        checkFreqCount.setText("Frequency Counter");
        checkFreqCount.setEnabled(false);

        checktransform.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        checktransform.setText("Text Transformation");
        checktransform.setEnabled(false);

        checkStem.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        checkStem.setText("Stemming");
        checkStem.setEnabled(false);

        checkwordselect.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        checkwordselect.setText("Word Selection");
        checkwordselect.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkwordselect)
                    .addComponent(checkStem)
                    .addComponent(checkfile)
                    .addComponent(checktok)
                    .addComponent(checkstop)
                    .addComponent(checkFreqCount)
                    .addComponent(checktransform))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkfile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checktok)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkstop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkStem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkFreqCount)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkwordselect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checktransform)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        selectedGlossaryFilePath.setEditable(false);
        selectedGlossaryFilePath.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N

        jLabel9.setText("Word to Define");

        listofwords.setModel(wordsmodel);
        listofwords.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listofwords.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listofwordsValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(listofwords);

        freqlist.setModel(freqmodel);
        freqlist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                freqlistValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(freqlist);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pro/miner/images/logo2.png"))); // NOI18N

        select.setText("Browse");
        select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectActionPerformed(evt);
            }
        });

        jTextFieldGlossaryFile.setEditable(false);
        jTextFieldGlossaryFile.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jTextFieldGlossaryFile.setPreferredSize(new java.awt.Dimension(6, 25));
        jTextFieldGlossaryFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldGlossaryFileActionPerformed(evt);
            }
        });

        select1.setText("Browse");
        select1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                select1ActionPerformed(evt);
            }
        });

        jLabel12.setText("Glossary File");

        jLabel8.setText("Synonyms [Word Net]");

        jLabel10.setText("Synonyms [Wiktionary]");

        checkBoxIncludeAgrovocdDictionary.setSelected(true);
        checkBoxIncludeAgrovocdDictionary.setText("Agrovoc - Agriculture Dictionary");
        checkBoxIncludeAgrovocdDictionary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxIncludeAgrovocdDictionaryActionPerformed(evt);
            }
        });

        jScrollPane11.setViewportView(agrovocWords);

        relatedWordsListWiktionary.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        relatedWordsListWiktionary.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane10.setViewportView(relatedWordsListWiktionary);

        relatedWordsListWordNet.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        relatedWordsListWordNet.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane8.setViewportView(relatedWordsListWordNet);

        meaningArea.setEditable(false);
        meaningArea.setColumns(20);
        meaningArea.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        meaningArea.setLineWrap(true);
        meaningArea.setRows(5);
        meaningArea.setWrapStyleWord(true);
        jScrollPane5.setViewportView(meaningArea);

        derivedWordsListWiktionary.setName(""); // NOI18N
        jScrollPane7.setViewportView(derivedWordsListWiktionary);

        jLabel6.setText("Derived Words [Wiktionary]");

        jLabel7.setText("Meaning");

        javax.swing.GroupLayout thirdPartySearchPanelLayout = new javax.swing.GroupLayout(thirdPartySearchPanel);
        thirdPartySearchPanel.setLayout(thirdPartySearchPanelLayout);
        thirdPartySearchPanelLayout.setHorizontalGroup(
            thirdPartySearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(thirdPartySearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(thirdPartySearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(thirdPartySearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(thirdPartySearchPanelLayout.createSequentialGroup()
                        .addGroup(thirdPartySearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(thirdPartySearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(thirdPartySearchPanelLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 127, Short.MAX_VALUE)
                        .addComponent(checkBoxIncludeAgrovocdDictionary)
                        .addGap(20, 20, 20))))
        );
        thirdPartySearchPanelLayout.setVerticalGroup(
            thirdPartySearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, thirdPartySearchPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(thirdPartySearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(thirdPartySearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(checkBoxIncludeAgrovocdDictionary)))
                .addGap(6, 6, 6)
                .addGroup(thirdPartySearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(thirdPartySearchPanelLayout.createSequentialGroup()
                        .addGroup(thirdPartySearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(thirdPartySearchPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7))
                            .addGroup(thirdPartySearchPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(thirdPartySearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)))
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel6.getAccessibleContext().setAccessibleName("jLabelWiktionaryDerivedWords");

        loadPreProcessedFile.setSelected(true);
        loadPreProcessedFile.setText("Load Pre-Processed File");

        saveCorpusFile.setText("Save");
        saveCorpusFile.setEnabled(false);
        saveCorpusFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCorpusFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(departmentName)
                        .addComponent(jScrollPane1)
                        .addComponent(jScrollPane2)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tastStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jScrollPane6)))
                            .addComponent(selectedGlossaryFilePath)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(folderPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(select))
                            .addComponent(progressBarTextMining, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(searchWord, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addSource, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(domain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextFieldGlossaryFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(select1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(saveCorpusFile))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(thirdPartySearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addGap(18, 18, 18)
                                        .addComponent(loadPreProcessedFile)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(folderPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(select, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane6)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(searchWord)
                                    .addComponent(reset)
                                    .addComponent(addSource)
                                    .addComponent(domain))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(progressBarTextMining, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(departmentName)))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(selectedGlossaryFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(loadPreProcessedFile))
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldGlossaryFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(select1)
                            .addComponent(saveCorpusFile)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tastStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(thirdPartySearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Tools");

        jMenuItem1.setText("Apply Frequency Threshold");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        Form_stage_one.child = null;
        Form_text_mining.selectedGlossaryFilePath.setText("");
        Form_text_mining.meaningArea.setText("");
        if (WordNetSearcher.relatedWordsListModel != null) {
            WordNetSearcher.relatedWordsListModel.removeAllElements();
        }
        StartStemmer.freqmodel.removeAllElements();
        StartStemmer.wordsmodel.removeAllElements();

    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void select1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_select1ActionPerformed
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        switch (fileChooser.showOpenDialog(this)) {
            case JFileChooser.APPROVE_OPTION: {
                jTextFieldGlossaryFile.setText(fileChooser.getSelectedFile().toString());

                progressBarTextMining.setIndeterminate(true);
                Thread worker = new Thread() {
                    public void run() {
                        File file = fileChooser.getSelectedFile();
                        try {
                            Form_text_mining.progressBarTextMining.setIndeterminate(true);
                            if (loadPreProcessedFile.isSelected()) {
                                Corpus.fillPreProcessedWordList(file);
                            } else {
                                Corpus.fillWordList(file);
                                saveCorpusFile.setEnabled(true);
                            }
                            Form_text_mining.progressBarTextMining.setIndeterminate(false);
                            Form_text_mining.domain.setEnabled(true);
                            Global.glossaryProcessed = true;
                        } catch (IOException ex) {
                            Logger.getLogger(Form_text_mining.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                };
                worker.start();
                break;
            }
            default: {
                break;
            }
        }
    }//GEN-LAST:event_select1ActionPerformed

    private void jTextFieldGlossaryFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldGlossaryFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldGlossaryFileActionPerformed

    private void checkBoxIncludeAgrovocdDictionaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxIncludeAgrovocdDictionaryActionPerformed
        // TODO add your handling code here
        includeAgrovocDictionary = checkBoxIncludeAgrovocdDictionary.isSelected();
    }//GEN-LAST:event_checkBoxIncludeAgrovocdDictionaryActionPerformed

    private void selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectActionPerformed
        // TODO add your handling code here:
        new TextMining().execute();
    }//GEN-LAST:event_selectActionPerformed

    private void freqlistValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_freqlistValueChanged
        // TODO add your handling code here:
        listofwords.setSelectedIndex(freqlist.getSelectedIndex());
        listofwords.ensureIndexIsVisible(freqlist.getSelectedIndex());
    }//GEN-LAST:event_freqlistValueChanged

    private void listofwordsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listofwordsValueChanged
        // TODO add your handling code here:
        new listWordSelection().select();
        freqlist.setSelectedIndex(listofwords.getSelectedIndex());
        freqlist.ensureIndexIsVisible(listofwords.getSelectedIndex());
        //        String s = listofwords.getSelectedValue().toString();
    }//GEN-LAST:event_listofwordsValueChanged

    private void domainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_domainActionPerformed
        // TODO add your handling code here:
        new Form_domain_expert();
    }//GEN-LAST:event_domainActionPerformed

    private void addSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSourceActionPerformed

    }//GEN-LAST:event_addSourceActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed

        searchWord.setEnabled(false);
        domain.setEnabled(false);
        addSource.setEnabled(false);
        reset.setEnabled(false);
        selectedGlossaryFilePath.setText("");
        Form_text_mining.meaningArea.setText("");
        WordNetSearcher.relatedWordsListModel.removeAllElements();
        StartStemmer.freqmodel.removeAllElements();
        StartStemmer.wordsmodel.removeAllElements();
        searchWord.setEnabled(false);
        checkstop.setSelected(false);
        checkFreqCount.setSelected(false);
        checkStem.setSelected(false);
    }//GEN-LAST:event_resetActionPerformed

    private void searchWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchWordActionPerformed
        try {
            //List list = null;
            words.clear();

            // TODO add your handling code here:
            Form_text_mining.meaningArea.setText("");
            reset.setEnabled(true);
            addSource.setEnabled(true);

            if (Global.glossaryProcessed) {
                domain.setEnabled(true);
            } else {
                domain.setEnabled(false);
            }

            WordNetSearcher.relatedWordsListModel.removeAllElements();
            try {
                new WordNetSearcher().searcher();
            } catch (Exception exception) {
            }

            // create a word net model
            DefaultListModel wordNetModel = new DefaultListModel();

            try {
                for (Object s : WordNetSearcher.getRelatedWordListModelList()) {
                    wordNetModel.addElement(s.toString());
                    words.add(s.toString());
                }

                // assign to word net list
                Form_text_mining.relatedWordsListWordNet.removeAll();
                Form_text_mining.relatedWordsListWordNet.setModel(wordNetModel);
            } catch (Exception exception) {
                Form_text_mining.relatedWordsListWordNet.removeAll();
                Form_text_mining.relatedWordsListWordNet.setModel(wordNetModel);
            }

            if(checkBoxIncludeAgrovocdDictionary.isSelected()){
                AgrovocSearcher.execute();
            }
            
            // Wiktionary Search
            DefaultListModel wiktionarySynonmsModel = new DefaultListModel();
            DefaultListModel wiktionaryDerivedWordsModel = new DefaultListModel();
            try {
                WiktionarySearcher searcher = new WiktionarySearcher(listWordSelection.selectedWord, "api");
                ArrayList<String> wikList;
                wikList = searcher.getSynonymsWordList();

                //Add wiktionary synonms into model
                for (Object s : wikList) {
                    wiktionarySynonmsModel.addElement(s.toString());
                    words.add(s.toString());
                }
                                        
                //Add wiktionary related words
                wikList = searcher.getDerivedWordList();

                //Add wiktionary synonms into model
                for (Object s : wikList) {
                    wiktionaryDerivedWordsModel.addElement(s.toString());
                }
      
                //Update wiktionary synonms list
                Form_text_mining.relatedWordsListWiktionary.removeAll();
                Form_text_mining.relatedWordsListWiktionary.setModel(wiktionarySynonmsModel);

                //Upldate wiktionary derived words list
                Form_text_mining.derivedWordsListWiktionary.removeAll();
                Form_text_mining.derivedWordsListWiktionary.setModel(wiktionaryDerivedWordsModel);

            } catch (Exception exception) {
                Form_text_mining.relatedWordsListWiktionary.removeAll();
                Form_text_mining.relatedWordsListWiktionary.setModel(wiktionarySynonmsModel);

                //Upldate wiktionary derived words list
                Form_text_mining.derivedWordsListWiktionary.removeAll();
                Form_text_mining.derivedWordsListWiktionary.setModel(wiktionaryDerivedWordsModel);
            }                       
        } catch (Exception ex) {
            Logger.getLogger(Form_text_mining.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchWordActionPerformed

    private void folderPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_folderPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_folderPathActionPerformed

    private void contextstreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_contextstreeValueChanged
        // TODO add your handling code here:
        TreeSelection t = new TreeSelection();
        t.SelectTree();
    }//GEN-LAST:event_contextstreeValueChanged

    private void saveCorpusFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCorpusFileActionPerformed
        // TODO add your handling code here:
        //NAEEM
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            try {
                File selectedFile = fileChooser.getSelectedFile();
                Files.write(Paths.get(selectedFile.toString()), Global.file_text.getBytes());
                saveCorpusFile.setEnabled(false);
            } catch (IOException e) {
                System.out.println("Exception occured while writing corpus file: " + e.getMessage());
            }
        }
        //Global.file_text;
    }//GEN-LAST:event_saveCorpusFileActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton addSource;
    public static javax.swing.JList agrovocWords;
    public static javax.swing.JCheckBox checkBoxIncludeAgrovocdDictionary;
    public static javax.swing.JCheckBox checkFreqCount;
    public static javax.swing.JCheckBox checkStem;
    public static javax.swing.JCheckBox checkfile;
    public static javax.swing.JCheckBox checkstop;
    public static javax.swing.JCheckBox checktok;
    public static javax.swing.JCheckBox checktransform;
    public static javax.swing.JCheckBox checkwordselect;
    public static javax.swing.JTree contextstree;
    public static javax.swing.JTextArea departmentField;
    public static javax.swing.JLabel departmentName;
    public static javax.swing.JList derivedWordsListWiktionary;
    public static javax.swing.JButton domain;
    public static javax.swing.JFileChooser fileChooser;
    public static javax.swing.JTextField folderPath;
    public static javax.swing.JList freqlist;
    public static javax.swing.JLabel jLabel1;
    public static javax.swing.JLabel jLabel10;
    public static javax.swing.JLabel jLabel12;
    public static javax.swing.JLabel jLabel2;
    public static javax.swing.JLabel jLabel3;
    public static javax.swing.JLabel jLabel4;
    public static javax.swing.JLabel jLabel5;
    public static javax.swing.JLabel jLabel6;
    public static javax.swing.JLabel jLabel7;
    public static javax.swing.JLabel jLabel8;
    public static javax.swing.JLabel jLabel9;
    public static javax.swing.JMenu jMenu1;
    public static javax.swing.JMenu jMenu2;
    public static javax.swing.JMenu jMenu3;
    public static javax.swing.JMenuBar jMenuBar1;
    public static javax.swing.JMenuItem jMenuItem1;
    public static javax.swing.JPanel jPanel1;
    public static javax.swing.JPanel jPanel2;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JScrollPane jScrollPane10;
    public static javax.swing.JScrollPane jScrollPane11;
    public static javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JScrollPane jScrollPane4;
    public static javax.swing.JScrollPane jScrollPane5;
    public static javax.swing.JScrollPane jScrollPane6;
    public static javax.swing.JScrollPane jScrollPane7;
    public static javax.swing.JScrollPane jScrollPane8;
    public static javax.swing.JTextArea jTextArea1;
    public static javax.swing.JTextField jTextFieldGlossaryFile;
    public static javax.swing.JList listofwords;
    public static javax.swing.JCheckBox loadPreProcessedFile;
    public static javax.swing.JTextArea meaningArea;
    public static javax.swing.JProgressBar progressBarTextMining;
    public static javax.swing.JList relatedWordsListWiktionary;
    public static javax.swing.JList relatedWordsListWordNet;
    public static javax.swing.JButton reset;
    public static javax.swing.JButton saveCorpusFile;
    public static javax.swing.JButton searchWord;
    public static javax.swing.JButton select;
    public static javax.swing.JButton select1;
    public static javax.swing.JTextField selectedGlossaryFilePath;
    public static javax.swing.JLabel tastStatus;
    public static javax.swing.JPanel thirdPartySearchPanel;
    // End of variables declaration//GEN-END:variables
}
