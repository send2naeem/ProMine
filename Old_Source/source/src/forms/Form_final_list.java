/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;

import core.Utility;
import java.io.*;
import java.util.Collections;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import pro.miner.classess.Entity;
import pro.miner.classess.Global;
import pro.miner.classess.listWordSelection;
import pro.minor.utility.Settings;

/**
 *
 * @author HOPE
 */
public class Form_final_list extends javax.swing.JFrame {

    /**
     * Creates new form FinalList
     */
    public Form_final_list() {
        initComponents();
        Keyword.setText(listWordSelection.selectedWord);
        generate_finalList();
        System.out.println("Final List Generated");

    }
    public static DefaultListModel finalListModel = new DefaultListModel();

    private void generate_finalList() {

        // sort by information gain first and display list as default
        Collections.sort(Global.entities, new Comparator<Entity>() {

            @Override
            public int compare(Entity o1, Entity o2) {
                return o2.information_gain.compareTo(o1.information_gain);
//                return o2.similarity_measure.compareTo(o1.similarity_measure);
            }
        });
        finalListModel.removeAllElements();
        for (Entity e : Global.entities) {
            finalListModel.addElement(e.word);
        }
        FinalLists.setModel(finalListModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Keyword = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        FinalLists = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        progressLabel = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Domain Expert - Final List");
        setBackground(new java.awt.Color(154, 180, 209));
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(154, 180, 209));

        jLabel1.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel1.setText("Word:");

        jLabel2.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel2.setText("Final Words:");

        Keyword.setEditable(false);
        Keyword.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        Keyword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KeywordActionPerformed(evt);
            }
        });

        FinalLists.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        FinalLists.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(FinalLists);

        jButton1.setText("Save To File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(progressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Keyword)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Keyword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(progressLabel)
                        .addGap(0, 24, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void KeywordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KeywordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_KeywordActionPerformed

    private void SaveToFile() {
        try {
            String word;
            String basePath = Settings.output_folder + '/' + Global.CurrentContextFile + '/';
            
            File dir = new File(basePath);
            if(!dir.exists())
                dir.mkdirs();
            System.out.println("In Save To File Function");

            File[] file_arr = new File[2];
            file_arr[0] = new File(basePath + listWordSelection.selectedWord + "_information_gain.txt");
            //file_arr[1] = new File(basePath + listWordSelection.selectedWord + "_similarity_measure.txt");

            BufferedWriter[] output_arr = new BufferedWriter[2];

            output_arr[0] = new BufferedWriter(new FileWriter(file_arr[0]));
            //output_arr[1] = new BufferedWriter(new FileWriter(file_arr[1]));

            progressLabel.setText("Current Action : Saving Information Gain File");
            // sort by information gain 
            Collections.sort(Global.entities, new Comparator<Entity>() {

                @Override
                public int compare(Entity o1, Entity o2) {
                    return o2.information_gain.compareTo(o1.information_gain);
                }
            });

            for (Entity e : Global.entities) {
                String line = e.word;// + " : " + e.information_gain;
                output_arr[0].write(line);
                output_arr[0].newLine();
            }

            progressLabel.setText("Current Action : Saving Similarity Measure File");
            // sort by similarity measure 
            Collections.sort(Global.entities, new Comparator<Entity>() {

                @Override
                public int compare(Entity o1, Entity o2) {
                    return o2.similarity_measure.compareTo(o1.similarity_measure);
                }
            });

            /*
            for (Entity e : Global.entities) {
                String line = e.word + " : " + e.similarity_measure;
                output_arr[1].write(line);
                output_arr[1].newLine();
            }
            */
            System.out.println("Save To File Completed");

            JOptionPane.showMessageDialog(null,
                    "List Saved",
                    "Successful",
                    JOptionPane.INFORMATION_MESSAGE);
            output_arr[0].close();
            //output_arr[1].close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.out.println("Calling Save To File Function");
        progressBar.setIndeterminate(true);
        SaveToFile();
        progressLabel.setText("File Saved");
        progressBar.setIndeterminate(false);

        if (Global.categoryManageEnabled) {
            if (Global.categoriesProcessed) {
                
                JOptionPane.showMessageDialog(null,
                        "Please wait. Application will notify on completion of CSV.",
                        "Information",
                        JOptionPane.ERROR_MESSAGE);
                
                progressBar.setIndeterminate(true);

                progressLabel.setText("Current Action : Matching List With Categories");

                try {
                    Utility.computeCategoryMatching();
                } catch (Exception ex) {
                    Logger.getLogger(Form_final_list.class.getName()).log(Level.SEVERE, null, ex);
                }

                try {
                    progressLabel.setText("Current Action : Saving CSV File");
                    Utility.generateCategoryDataCSV(listWordSelection.selectedWord);
                    progressBar.setIndeterminate(false);
                    progressLabel.setText("CSV File Saved");
                    JOptionPane.showMessageDialog(null,
                            "CSV Data Generated.",
                            "Success",
                            JOptionPane.ERROR_MESSAGE);
                } catch (IOException ex) {
                    Logger.getLogger(Form_final_list.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                progressBar.setIndeterminate(false);
                progressLabel.setText("");
                JOptionPane.showMessageDialog(null,
                        "Category Processing is not complete. Please wait and try again.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Form_final_list.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Form_final_list.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Form_final_list.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form_final_list.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Form_final_list().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JList FinalLists;
    public static javax.swing.JTextField Keyword;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel progressLabel;
    // End of variables declaration//GEN-END:variables
}
